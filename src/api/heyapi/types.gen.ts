// This file is auto-generated by @hey-api/openapi-ts

export type ApiResponse = {
    code?: number;
    type?: string;
    message?: string;
};

export type Category = {
    id?: number;
    name?: string;
};

export type Pet = {
    id?: number;
    category?: Category;
    name: string;
    photoUrls: Array<string>;
    tags?: Array<Tag>;
    /**
     * pet status in the store
     */
    status?: 'available' | 'pending' | 'sold';
};

export type Tag = {
    id?: number;
    name?: string;
};

export type Order = {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    /**
     * Order Status
     */
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
};

export type User = {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    /**
     * User Status
     */
    userStatus?: number;
};

export type UploadFileData = {
    body?: {
        /**
         * Additional data to pass to server
         */
        additionalMetadata?: string;
        /**
         * file to upload
         */
        file?: Blob | File;
    };
    path: {
        /**
         * ID of pet to update
         */
        petId: number;
    };
    query?: never;
    url: '/pet/{petId}/uploadImage';
};

export type UploadFileResponses = {
    /**
     * successful operation
     */
    200: ApiResponse;
};

export type UploadFileResponse = UploadFileResponses[keyof UploadFileResponses];

export type AddPetData = {
    /**
     * Pet object that needs to be added to the store
     */
    body: Pet;
    path?: never;
    query?: never;
    url: '/pet';
};

export type AddPetErrors = {
    /**
     * Invalid input
     */
    405: unknown;
};

export type UpdatePetData = {
    /**
     * Pet object that needs to be added to the store
     */
    body: Pet;
    path?: never;
    query?: never;
    url: '/pet';
};

export type UpdatePetErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Pet not found
     */
    404: unknown;
    /**
     * Validation exception
     */
    405: unknown;
};

export type FindPetsByStatusData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Status values that need to be considered for filter
         */
        status: Array<'available' | 'pending' | 'sold'>;
    };
    url: '/pet/findByStatus';
};

export type FindPetsByStatusErrors = {
    /**
     * Invalid status value
     */
    400: unknown;
};

export type FindPetsByStatusResponses = {
    /**
     * successful operation
     */
    200: Array<Pet>;
};

export type FindPetsByStatusResponse = FindPetsByStatusResponses[keyof FindPetsByStatusResponses];

export type FindPetsByTagsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Tags to filter by
         */
        tags: Array<string>;
    };
    url: '/pet/findByTags';
};

export type FindPetsByTagsErrors = {
    /**
     * Invalid tag value
     */
    400: unknown;
};

export type FindPetsByTagsResponses = {
    /**
     * successful operation
     */
    200: Array<Pet>;
};

export type FindPetsByTagsResponse = FindPetsByTagsResponses[keyof FindPetsByTagsResponses];

export type DeletePetData = {
    body?: never;
    headers?: {
        api_key?: string;
    };
    path: {
        /**
         * Pet id to delete
         */
        petId: number;
    };
    query?: never;
    url: '/pet/{petId}';
};

export type DeletePetErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Pet not found
     */
    404: unknown;
};

export type GetPetByIdData = {
    body?: never;
    path: {
        /**
         * ID of pet to return
         */
        petId: number;
    };
    query?: never;
    url: '/pet/{petId}';
};

export type GetPetByIdErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Pet not found
     */
    404: unknown;
};

export type GetPetByIdResponses = {
    /**
     * successful operation
     */
    200: Pet;
};

export type GetPetByIdResponse = GetPetByIdResponses[keyof GetPetByIdResponses];

export type UpdatePetWithFormData = {
    body?: {
        /**
         * Updated name of the pet
         */
        name?: string;
        /**
         * Updated status of the pet
         */
        status?: string;
    };
    path: {
        /**
         * ID of pet that needs to be updated
         */
        petId: number;
    };
    query?: never;
    url: '/pet/{petId}';
};

export type UpdatePetWithFormErrors = {
    /**
     * Invalid input
     */
    405: unknown;
};

export type GetInventoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/store/inventory';
};

export type GetInventoryResponses = {
    /**
     * successful operation
     */
    200: {
        [key: string]: number;
    };
};

export type GetInventoryResponse = GetInventoryResponses[keyof GetInventoryResponses];

export type PlaceOrderData = {
    /**
     * order placed for purchasing the pet
     */
    body: Order;
    path?: never;
    query?: never;
    url: '/store/order';
};

export type PlaceOrderErrors = {
    /**
     * Invalid Order
     */
    400: unknown;
};

export type PlaceOrderResponses = {
    /**
     * successful operation
     */
    200: Order;
};

export type PlaceOrderResponse = PlaceOrderResponses[keyof PlaceOrderResponses];

export type DeleteOrderData = {
    body?: never;
    path: {
        /**
         * ID of the order that needs to be deleted
         */
        orderId: number;
    };
    query?: never;
    url: '/store/order/{orderId}';
};

export type DeleteOrderErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Order not found
     */
    404: unknown;
};

export type GetOrderByIdData = {
    body?: never;
    path: {
        /**
         * ID of pet that needs to be fetched
         */
        orderId: number;
    };
    query?: never;
    url: '/store/order/{orderId}';
};

export type GetOrderByIdErrors = {
    /**
     * Invalid ID supplied
     */
    400: unknown;
    /**
     * Order not found
     */
    404: unknown;
};

export type GetOrderByIdResponses = {
    /**
     * successful operation
     */
    200: Order;
};

export type GetOrderByIdResponse = GetOrderByIdResponses[keyof GetOrderByIdResponses];

export type CreateUsersWithListInputData = {
    /**
     * List of user object
     */
    body: Array<User>;
    path?: never;
    query?: never;
    url: '/user/createWithList';
};

export type CreateUsersWithListInputResponses = {
    /**
     * successful operation
     */
    default: unknown;
};

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * The name that needs to be deleted
         */
        username: string;
    };
    query?: never;
    url: '/user/{username}';
};

export type DeleteUserErrors = {
    /**
     * Invalid username supplied
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
};

export type GetUserByNameData = {
    body?: never;
    path: {
        /**
         * The name that needs to be fetched. Use user1 for testing.
         */
        username: string;
    };
    query?: never;
    url: '/user/{username}';
};

export type GetUserByNameErrors = {
    /**
     * Invalid username supplied
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
};

export type GetUserByNameResponses = {
    /**
     * successful operation
     */
    200: User;
};

export type GetUserByNameResponse = GetUserByNameResponses[keyof GetUserByNameResponses];

export type UpdateUserData = {
    /**
     * Updated user object
     */
    body: User;
    path: {
        /**
         * name that need to be updated
         */
        username: string;
    };
    query?: never;
    url: '/user/{username}';
};

export type UpdateUserErrors = {
    /**
     * Invalid user supplied
     */
    400: unknown;
    /**
     * User not found
     */
    404: unknown;
};

export type LoginUserData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The user name for login
         */
        username: string;
        /**
         * The password for login in clear text
         */
        password: string;
    };
    url: '/user/login';
};

export type LoginUserErrors = {
    /**
     * Invalid username/password supplied
     */
    400: unknown;
};

export type LoginUserResponses = {
    /**
     * successful operation
     */
    200: string;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/logout';
};

export type LogoutUserResponses = {
    /**
     * successful operation
     */
    default: unknown;
};

export type CreateUsersWithArrayInputData = {
    /**
     * List of user object
     */
    body: Array<User>;
    path?: never;
    query?: never;
    url: '/user/createWithArray';
};

export type CreateUsersWithArrayInputResponses = {
    /**
     * successful operation
     */
    default: unknown;
};

export type CreateUserData = {
    /**
     * Created user object
     */
    body: User;
    path?: never;
    query?: never;
    url: '/user';
};

export type CreateUserResponses = {
    /**
     * successful operation
     */
    default: unknown;
};

export type ClientOptions = {
    baseUrl: 'https://petstore.swagger.io/v2' | 'http://petstore.swagger.io/v2' | (string & {});
};