// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer, urlSearchParamsBodySerializer } from '@/http/client-mp';
import type { UploadFileData, UploadFileResponse, AddPetData, UpdatePetData, FindPetsByStatusData, FindPetsByStatusResponse, FindPetsByTagsData, FindPetsByTagsResponse, DeletePetData, GetPetByIdData, GetPetByIdResponse, UpdatePetWithFormData, GetInventoryData, GetInventoryResponse, PlaceOrderData, PlaceOrderResponse, DeleteOrderData, GetOrderByIdData, GetOrderByIdResponse, CreateUsersWithListInputData, DeleteUserData, GetUserByNameData, GetUserByNameResponse, UpdateUserData, LoginUserData, LoginUserResponse, LogoutUserData, CreateUsersWithArrayInputData, CreateUserData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * uploads an image
 */
export const uploadFile = <ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet/{petId}/uploadImage',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Add a new pet to the store
 */
export const addPet = <ThrowOnError extends boolean = false>(options: Options<AddPetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update an existing pet
 */
export const updatePet = <ThrowOnError extends boolean = false>(options: Options<UpdatePetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = <ThrowOnError extends boolean = false>(options: Options<FindPetsByStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPetsByStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet/findByStatus',
        ...options
    });
};

/**
 * @deprecated
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <ThrowOnError extends boolean = false>(options: Options<FindPetsByTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPetsByTagsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet/findByTags',
        ...options
    });
};

/**
 * Deletes a pet
 */
export const deletePet = <ThrowOnError extends boolean = false>(options: Options<DeletePetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet/{petId}',
        ...options
    });
};

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById = <ThrowOnError extends boolean = false>(options: Options<GetPetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPetByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'api_key',
                type: 'apiKey'
            }
        ],
        url: '/pet/{petId}',
        ...options
    });
};

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm = <ThrowOnError extends boolean = false>(options: Options<UpdatePetWithFormData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/pet/{petId}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory = <ThrowOnError extends boolean = false>(options?: Options<GetInventoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetInventoryResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'api_key',
                type: 'apiKey'
            }
        ],
        url: '/store/inventory',
        ...options
    });
};

/**
 * Place an order for a pet
 */
export const placeOrder = <ThrowOnError extends boolean = false>(options: Options<PlaceOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PlaceOrderResponse, unknown, ThrowOnError>({
        url: '/store/order',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export const deleteOrder = <ThrowOnError extends boolean = false>(options: Options<DeleteOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/store/order/{orderId}',
        ...options
    });
};

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export const getOrderById = <ThrowOnError extends boolean = false>(options: Options<GetOrderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderByIdResponse, unknown, ThrowOnError>({
        url: '/store/order/{orderId}',
        ...options
    });
};

/**
 * Creates list of users with given input array
 */
export const createUsersWithListInput = <ThrowOnError extends boolean = false>(options: Options<CreateUsersWithListInputData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/user/createWithList',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/user/{username}',
        ...options
    });
};

/**
 * Get user by user name
 */
export const getUserByName = <ThrowOnError extends boolean = false>(options: Options<GetUserByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByNameResponse, unknown, ThrowOnError>({
        url: '/user/{username}',
        ...options
    });
};

/**
 * Updated user
 * This can only be done by the logged in user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/user/{username}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logs user into the system
 */
export const loginUser = <ThrowOnError extends boolean = false>(options: Options<LoginUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LoginUserResponse, unknown, ThrowOnError>({
        url: '/user/login',
        ...options
    });
};

/**
 * Logs out current logged in user session
 */
export const logoutUser = <ThrowOnError extends boolean = false>(options?: Options<LogoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/user/logout',
        ...options
    });
};

/**
 * Creates list of users with given input array
 */
export const createUsersWithArrayInput = <ThrowOnError extends boolean = false>(options: Options<CreateUsersWithArrayInputData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/user/createWithArray',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};